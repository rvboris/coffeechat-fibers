(function($, window, document, aes) {    'use strict';    var privateMethods = {};    var instance;    function System(options) {        this.options = options;        $.extend(true, this.options, {            updateUser: function(user) {                privateMethods.options.currentUser = user;                if (instance) instance.options.currentUser = user;            },            updateSubscriptions: function(subscriptions) {                privateMethods.subscriptions = subscriptions;                if (instance) instance.subscriptions = subscriptions;            }        });        this.subscriptions = [];        this.fayeClient = new Faye.Client(window.location.protocol + '//' + window.location.host + '/faye', { timeout: 10 });        this.fayeClient.bind('transport:down', privateMethods.transportDown);        this.fayeClient.bind('transport:up', privateMethods.transportUp);        this.critError = false;        this.lastMessages = [];        return privateMethods.init(this);    }    // Private methods    privateMethods.auth = {        uLoginTimeoutCheck: null,        successLogin: function(data) {            privateMethods.options.updateUser($.extend(true, {}, privateMethods.options.currentUser, data));            privateMethods.channel.userChannel();            $.fn.ufc().login.hide();            $.fn.ufc().user.highlightMe();            $.fn.ufc().user.filterIgnore();            $.fn.ufc().layers.hide();            if (privateMethods.options.currentUser.channelsOwner.length >= 3) {                $('button#create-channel').addClass('disabled');            } else {                $('button#create-channel').removeClass('disabled');            }            $('#container').fadeTo('fast', 1);        },        initLogin: function() {            privateMethods.auth.uLoginTimeoutCheck = setTimeout(function() {                try {                    if (typeof uLogin.init == 'undefined') {                        privateMethods.uLogin.disable();                    }                } catch (e) {                    privateMethods.uLogin.disable();                }            }, 3000);            $('#login').submit(function() {                if ($(this).find('input').hasClass('ui-state-error')) {                    $.fn.notifier('Ошибка отправки, сообщение пустое.');                    return false;                }                $.blockUI({                    message: 'Авторизация...',                    css: {                        'border': 'none',                        'background': 'transparent',                        'height': '25px',                        'line-height': '25px',                        'color': '#C4B1C4',                        'font-size': '1.2em'                    },                    overlayCSS: {                        opacity: 0.4,                        backgroundColor: '#4A324A'                    }                });                $.post('/user/login', {                    _csrf: privateMethods.options.csrf,                    user: $('#login input').serializeObject(),                    channels: privateMethods.subscriptions                }).success(function(data) {                    if (data.error) return $.fn.notifier(data.error);                    privateMethods.auth.successLogin(data);                }).error(function() {                    $.fn.notifier('Ошибка отправки данных.');                }).complete(function() {                    $.unblockUI();                });                return false;            });        },        initLogout: function() {            $('body').on('click', '#logout', function() {                $.post('/user/logout', { _csrf: privateMethods.options.csrf }).success(function() {                    for (var i = 0; i < privateMethods.subscriptions.length; i++) {                        privateMethods.fayeClient.unsubscribe('/channel/' + privateMethods.subscriptions[i]);                        privateMethods.fayeClient.unsubscribe('/channel/' + privateMethods.subscriptions[i] + '/users');                    }                    privateMethods.fayeClient.unsubscribe('/user/' + privateMethods.options.currentUser.id);                    privateMethods.fayeClient.unsubscribe('/channel-list');                    window.location.reload();                }).error(function() {                    $.fn.notifier('Ошибка отправки данных.');                });                return false;            });        }    };    privateMethods.audio = {        sounds: {},        init: function() {            privateMethods.audio.sounds.incomingMessage = AudioFX('/sounds/incoming_message', { formats: ['ogg', 'mp3'], volume: 1 });            privateMethods.audio.sounds.outgoingMessage = AudioFX('/sounds/outgoing_message', { formats: ['ogg', 'mp3'], volume: 1 });            privateMethods.audio.sounds.mentionMessage = AudioFX('/sounds/mention_message', { formats: ['ogg', 'mp3'], volume: 1 });            privateMethods.audio.sounds.popup = AudioFX('/sounds/popup', { formats: ['ogg', 'mp3'] });        },        message: function(direction, callback) {            if (privateMethods.options.currentUser.id !== '0') {                if (privateMethods.options.currentUser.settings.audio.onMessage) {                    if (privateMethods.options.currentUser.settings.audio.whenAway || privateMethods.options.currentUser.settings.audio.whenUnavailable) {                        if (privateMethods.options.currentUser.settings.audio.whenAway && (privateMethods.options.currentUser.status === 'A' || privateMethods.options.currentUser.status === 'U')) {                            if (direction === 'in') {                                privateMethods.audio.sounds.incomingMessage.play();                            } else {                                privateMethods.audio.sounds.outgoingMessage.play();                            }                        } else if (privateMethods.options.currentUser.settings.audio.whenUnavailable && privateMethods.options.currentUser.status === 'U') {                            if (direction === 'in') {                                privateMethods.audio.sounds.incomingMessage.play();                            } else {                                privateMethods.audio.sounds.outgoingMessage.play();                            }                        }                    } else {                        if (direction === 'in') {                            privateMethods.audio.sounds.incomingMessage.play();                        } else {                            privateMethods.audio.sounds.outgoingMessage.play();                        }                    }                }            } else {                if (direction === 'in') {                    privateMethods.audio.sounds.incomingMessage.play();                } else {                    privateMethods.audio.sounds.outgoingMessage.play();                }            }            if (typeof callback === 'function') callback();        },        mention: function(callback) {            if (privateMethods.options.currentUser.id !== '0') {                if (privateMethods.options.currentUser.settings.audio.onMention || privateMethods.options.currentUser.settings.audio.onMessage) {                    if (privateMethods.options.currentUser.settings.audio.whenAway || privateMethods.options.currentUser.settings.audio.whenUnavailable) {                        if (privateMethods.options.currentUser.settings.audio.whenAway && (privateMethods.options.currentUser.status === 'A' || privateMethods.options.currentUser.status === 'U')) {                            privateMethods.audio.sounds.mentionMessage.play();                        } else if (privateMethods.options.currentUser.settings.audio.whenUnavailable && privateMethods.options.currentUser.status === 'U') {                            privateMethods.audio.sounds.mentionMessage.play();                        }                    } else {                        privateMethods.audio.sounds.mentionMessage.play();                    }                }            }            if (typeof callback === 'function') callback();        },        popup: function(callback) {            if (privateMethods.options.currentUser.id !== '0') {                privateMethods.audio.sounds.popup.play();            }            if (typeof callback === 'function') callback();        }    };    privateMethods.activity = {        init: function() {            $.activity.init({                interval: 500,                inactive: 1800000,                intervalFn: privateMethods.interval,                inactiveFn: privateMethods.inactive            });            $('body').on('mousemove', function() {                $.activity.isActive() ? $.activity.update() : $.activity.reActivate();            });        },        interval: function(args) {            if (privateMethods.options.currentUser.id === '0') return;            if (args.diff >= 6000000) {                if (!privateMethods.options.currentUser.overrideStatus && privateMethods.options.currentUser.status !== 'A') {                    privateMethods.status.change('away');                }            } else if (privateMethods.options.currentUser.status !== 'O' && !privateMethods.options.currentUser.overrideStatus) {                privateMethods.status.change('online');            }        },        inactive: function() {            if (privateMethods.options.currentUser.id === '0') return;            if (privateMethods.options.currentUser.status !== 'U') privateMethods.status.change('unavailable');        }    };    privateMethods.channel = {        tmpPassword: false,        init: function() {            privateMethods.channel.addExtensions();            $('#bottom form').submit(function(e) {                e.preventDefault();                if (privateMethods.options.currentUser.id === '0') {                    $.fn.notifier('Гости не могут отправлять сообщения, пожалуйста зарегистрируйтесь.');                    return false;                }                if ($('#container').css('opacity') === '0') return false;                $('#bottom').block({                    message: 'Отправка...',                    css: {                        'border': 'none',                        'background': 'transparent',                        'height': '25px',                        'line-height': '25px',                        'color': '#FFF',                        'font-size': '1.2em'                    }                });                try {                    var tabId = $('#channels .current button.channel').attr('id');                    var channelId = tabId.substr(8, tabId.length);                    var to = [];                    if ($('#' + tabId + '-content .sendto li').length > 0) {                        $('#' + tabId + '-content .sendto li button.name').each(function(index, value) {                            to[index] = value.innerHTML;                        });                    }                    if ($.inArray($('#message').val(), privateMethods.lastMessages) < 0) {                        if (privateMethods.lastMessages.length >= 10) privateMethods.lastMessages.shift();                        privateMethods.lastMessages.push(privateMethods.parsers.links($('#message').val()));                    }                    var msg = { text: $('#message').val() };                    if (to.length > 0) msg.to = to;                    privateMethods.fayeClient.publish('/channel/' + channelId, msg).callback(function() {                        privateMethods.audio.message('out', function() {                            $('#message').val('').focus();                            messageTmp = '';                            $('#bottom').unblock();                        });                    });                } catch (e) {                    if (privateMethods.options.env === 'development') {                        console.log(e.stack);                    }                }                return false;            });            var lastTypeCheck = 0;            var messageHistoryIndex = 0;            var messageTmp = '';            $('#bottom #message').on('keyup', function(e) {                if (((e.keyCode >= 48 && e.keyCode <= 90) || (e.keyCode >= 96 && e.keyCode <= 111) || (e.keyCode >= 186 && e.keyCode <= 222))) {                    if (new Date().getTime() - lastTypeCheck > 1000) {                        lastTypeCheck = new Date().getTime();                        var tabId = $('#channels .current button.channel').attr('id');                        var channelId = tabId.substr(8, tabId.length);                        if ($('#channels li button#channel-' + channelId).data('private')) {                            privateMethods.fayeClient.publish('/channel/' + channelId + '/private', { action: 'type' });                        }                    }                    messageTmp = $('#bottom #message').val();                } else if (e.keyCode === 38 || e.keyCode === 40) {                    if (e.keyCode === 38) {                        messageHistoryIndex++;                        if (messageHistoryIndex > privateMethods.lastMessages.length) messageHistoryIndex = 0;                    } else if (e.keyCode === 40) {                        messageHistoryIndex--;                        if (messageHistoryIndex < 0) messageHistoryIndex = privateMethods.lastMessages.length;                    }                    if (messageHistoryIndex === 0) {                        $('#bottom #message').val(messageTmp);                    } else if (privateMethods.lastMessages[messageHistoryIndex - 1]) {                        $('#bottom #message').val(privateMethods.lastMessages[messageHistoryIndex - 1])                    }                }            }).on('focus', function() {                $('#bottom button.history').css('background-position', 'center center');            }).on('blur', function() {                $('#bottom button.history').css('background-position', 'left center');            });            $('#bottom button.history').on('click', function() {                if ($(this).hasClass('up')) {                    messageHistoryIndex++;                    if (messageHistoryIndex > privateMethods.lastMessages.length) messageHistoryIndex = 0;                } else if ($(this).hasClass('down')) {                    messageHistoryIndex--;                    if (messageHistoryIndex < 0) messageHistoryIndex = privateMethods.lastMessages.length;                }                if (messageHistoryIndex === 0) {                    $('#bottom #message').val(messageTmp);                } else if (privateMethods.lastMessages[messageHistoryIndex - 1]) {                    $('#bottom #message').val(privateMethods.lastMessages[messageHistoryIndex - 1])                }                return false;            });            if (privateMethods.options.currentUser.id !== '0') privateMethods.channel.userChannel();            $('#channel-list #create-channel, section.create-channel button.cancel').on('click', function () {                if ($(this).hasClass('disabled')) return;                if (privateMethods.options.currentUser.id === '0') {                    $.fn.notifier('Создание комнат доступно только зарегистрированым пользователям.');                    return false;                }                $.fn.ufc().layers.toogle('create');                $('section.create-channel #channel-name').val('');                $('section.create-channel #channel-url').val('');                $('section.create-channel #channel-description').val('');                $('section.create-channel #channel-password').val('');                if ($('section.create-channel #channel-hidden').prop('checked')) {                    $('section.create-channel span.channel-hidden').trigger('click');                }                return false;            });            $('section.create-channel form.create-channel').submit(function() {                $('section.create-channel').block({                    message: 'Создание комнаты...',                    css: {                        'border': 'none',                        'background': 'transparent',                        'height': '25px',                        'line-height': '25px',                        'color': '#C4B1C4',                        'font-size': '1.1em'                    },                    overlayCSS: {                        opacity: 0.6,                        backgroundColor: '#4A324A'                    }                });                $.post('/channel/create', $('section.create-channel form.create-channel input, section.create-channel form.create-channel textarea').serialize()).success(function(data) {                    if (data.error) return $.fn.notifier(data.error);                    $.fn.ufc().layers.toogle('create', function () {                        var name = $('section.create-channel #channel-name').val();                        var url = window.location.href + 'c/' + data.url;                        var hidden = $('section.create-channel #channel-hidden').prop('checked');                        var password = $('section.create-channel #channel-password').val();                        password = password === '' ? false : password;                        privateMethods.options.currentUser.channelsOwner.push(data.id);                        privateMethods.options.updateUser($.extend({}, privateMethods.options.currentUser, {                            channelsOwner: privateMethods.options.currentUser.channelsOwner                        }));                        if (privateMethods.options.currentUser.channelsOwner.length >= 3) {                            $('button#create-channel').addClass('disabled');                        }                        privateMethods.channel.subscribe(name, data.id, {                            'owner': true,                            'private': false,                            'password': password                        }, function (err) {                            if (err) return;                            if (hidden) {                                privateMethods.channel.notify(data.id, { name: '$' }, 'Вы создали скрытую комнату, для приглашения пользователей используйте ссылку <a class="userLink" target="_blank" href="' + url + '">' + url + '</a>');                            }                        });                    });                }).error(function() {                    $.fn.notifier('Не удалось создать комнату');                }).complete(function() {                    $('section.create-channel').unblock();                });                return false;            });        },        addExtensions: function() {            privateMethods.fayeClient.addExtension({                outgoing: function(message, callback) {                    if (privateMethods.critError) return;                    message.token = privateMethods.options.currentUser.id;                    if (message.channel === '/meta/subscribe' && privateMethods.channel.tmpPassword !== false) {                        message.password = privateMethods.channel.tmpPassword;                        privateMethods.channel.tmpPassword = false;                    }                    if (message.data && message.data.text) {                        message.data.text = aes.enc(message.data.text, privateMethods.options.serverKey + privateMethods.options.currentUser.id);                    }                    if (message.channel === '/meta/connect') {                        message.activeChannels = privateMethods.subscriptions;                    }                    callback(message);                },                incoming: function(message, callback) {                    if (privateMethods.critError) return;                    if (message.error) {                        if (privateMethods.options.env === 'production') {                            if (message.error.match(/^[\d]{3}:/) === null) {                                if (message.error === 'Ключ не верный') {                                    privateMethods.critError = true;                                    $.fn.notifier('Ошибка соединения, через 5 секунд страница будет обновлена.');                                    setTimeout(function () {                                        window.location.reload();                                    }, 5000);                                } else {                                    $.fn.notifier(message.error);                                }                            }                        } else {                            if (message.error === 'Ключ не верный') {                                privateMethods.critError = true;                                $.fn.notifier('Ошибка соединения');                                setTimeout(function () {                                    window.location.reload();                                }, 5000);                            } else {                                $.fn.notifier(message.error);                            }                        }                        $('#bottom').unblock();                    } else {                        if (message.data && message.data.text) {                            try {                                message.data.text = aes.dec(message.data.text, privateMethods.options.serverKey);                            } catch (e) {                                $.fn.notifier('Ошибка декодирования сообщения.');                            }                        }                        if (message.data && message.data.text && message.channel.match(/(?:^\/channel\/)([0-9a-z]+)$/) !== null) {                            if (privateMethods.options.currentUser.id !== '0') {                                if (privateMethods.options.currentUser.ignore.indexOf(message.data.name) > -1) return;                                if (message.data.to && message.data.to.length > 0 && message.data.to.indexOf(privateMethods.options.currentUser.name) > -1) {                                    privateMethods.audio.mention(null);                                } else {                                    privateMethods.audio.message('in', null);                                }                            } else {                                privateMethods.audio.message('in', null);                            }                        }                        callback(message);                    }                }            });        },        userChannel: function() {            privateMethods.fayeClient.subscribe('/user/' + privateMethods.options.currentUser.id, function(update) {                if (privateMethods.options.currentUser.ignore.indexOf(update.fromUser.name) > -1) return;                switch (update.action) {                    case 'private.request':                        if (privateMethods.actions['private'].queue.indexOf(update.fromUser.name) > -1) return;                        if (privateMethods.actions['private'].queue.length === 0) {                            $.fn.ufc().channel.qtips['private'](update.fromUser.name);                            if (privateMethods.options.currentUser.settings.audio.onPrivate) {                                privateMethods.audio.popup(function() {                                    privateMethods.actions.popup = true;                                    privateMethods.actions['private'].queue.push(update.fromUser.name);                                    $(window).qtip('api').show();                                });                            } else {                                privateMethods.actions.popup = true;                                privateMethods.actions['private'].queue.push(update.fromUser.name);                                $(window).qtip('api').show();                            }                        } else {                            privateMethods.actions['private'].queue.push(update.fromUser.name);                        }                        break;                    case 'private.no':                        $.fn.notifier('Пользователь "' + update.fromUser.name + '" отказался от приглашения в приват');                        break;                    case 'private.yes':                        privateMethods.channel.subscribe(update.privateChannel.name, update.privateChannel.id, { 'private': true, url: update.privateChannel.url }, function(err) {                            if (err) return;                            $.fn.notifier('Пользователь "' + update.fromUser.name + '" принял ваше приглашение в приват');                        });                        break;                    case 'private.reopen':                        privateMethods.channel.subscribe(update.privateChannel.name, update.privateChannel.id, { 'private': true, url: update.privateChannel.url }, function(err) {                            if (err) return;                            $.fn.notifier('Пользователь "' + update.fromUser.name + '" вернулся в приват');                        });                        break;                    case 're-entry':                        $.fn.notifier('Попытка повторного входа');                }            });        },        list: {            ready: false,            init: function () {                if (privateMethods.channel.list.ready) return;                privateMethods.channel.list.ready = true;                if (privateMethods.options.currentUser.id === '0') {                    $('button#create-channel').addClass('disabled');                } else {                    if (privateMethods.options.currentUser.channelsOwner.length >= 3) {                        $('button#create-channel').addClass('disabled');                    }                }                privateMethods.fayeClient.subscribe('/channel-list', function (update) {                    switch (update.action) {                        case 'rem':                            break;                        case 'add':                            $('#channel-list menu').append($.fn.ufc().channel.format(update.channel));                            break;                        case 'upd':                            update.channels.forEach(function (channel) {                                var counter = $('#channel-list menu button').filter(function () {                                    return $(this).data('id') === channel.id;                                }).find('.count');                                counter.html(channel.count.toString());                            });                    }                }).callback(function () {                    if ($.jStorage.get('channel-list') || $.jStorage.get('channel-list') === null) {                        $.fn.ufc().channels.showChannelList(false);                    }                    $('#channel-list').block({                        message: 'Загрузка...',                        css: {                            'border': 'none',                            'background': 'transparent',                            'height': '25px',                            'line-height': '25px',                            'color': '#C4B1C4',                            'font-size': '1.2em'                        },                        overlayCSS: {                            opacity: 0.2,                            backgroundColor: '#000'                        }                    });                    $.post('/channel/list', { _csrf: privateMethods.options.csrf }).success(function (data) {                        if (data.length > 0 && data !== 'OK') {                            $('#channel-list header .count').html(data.length);                            for (var i = 0, list = ''; i < data.length; i++) {                                list += $.fn.ufc().channel.format(data[i]);                            }                            $('#channel-list menu').append(list);                        }                    }).error(function () {                        $.fn.notifier('Невозможно получить список комнат');                    }).complete(function () {                        $('#channel-list').unblock();                    });                });                $.fn.ufc().channels.init();                $('#channel-list menu').on('click', 'button', function () {                    privateMethods.channel.subscribe($(this).find('span.name').text(), $(this).data('id'), { 'private': false, url: $(this).data('url') }, null);                });            }        }    };    privateMethods.helpers = {        browserCheck: function() {            return ($.browser.name === 'firefox' && $.browser.versionNumber >= 4)   ||                   ($.browser.name === 'msie'    && $.browser.versionNumber >= 9)   ||                   ($.browser.name === 'chrome'  && $.browser.versionNumber >= 10)  ||                   ($.browser.name === 'opera'   && $.browser.versionNumber >= 9.8) ||                   ($.browser.name === 'safari'  && $.browser.versionNumber >= 5);        }    };    privateMethods.parsers = {        links: function(message) {            return message.replace(/([a-zA-Z]+):\/\/([^:\/?#\s]+)+(:\d+)?(\/[^?#\s]+)?(\?[^#\s]+)?(#[^\s]+)?/, '<a href="$&" class="userLink" target="_blank">$&</a>');        }    };    privateMethods.transportDown = function() {        $.blockUI({            message: 'Соединение с сервером потеряно, проверьте подключение к интернету',            css: {                'border': 'none',                'background': 'transparent',                'height': '25px',                'line-height': '25px',                'color': '#C4B1C4',                'font-size': '1.2em'            },            overlayCSS: {                opacity: 0.4,                backgroundColor: '#4A324A'            }        });    };    privateMethods.transportUp = function() {        $.unblockUI();    };    privateMethods.translit = {        en2ru: {            A: "А", a: "а", B: "Б", b: "б", V: "В", v: "в", G: "Г",            g: "г", D: "Д", d: "д", E: "Е", e: "е", Z: "З", z: "з",            I: "И", i: "и", J: "Й", j: "й", K: "К", k: "к", L: "Л",            l: "л", M: "М", m: "м", N: "Н", n: "н", O: "О", o: "о",            P: "П", p: "п", R: "Р", r: "р", S: "С", s: "с", T: "Т",            t: "т", U: "У", u: "у", F: "Ф", f: "ф", X: "Х", x: "х",            H: "Х", h: "х", C: "Ц", c: "ц", W: "В", w: "в", "ъъ": "Ъ",            "\u0022": "ъ", Y: "Ы", y: "ы", "ьь": "Ь", "\u0027": "ь",            Ä: "Э", ä: "э", Ö: "Ё", ö: "ё", Ü: "Ю", ü: "ю", "#": "№",            ЙЕ: "Э", Йе: "Э", йе: "э", ЙО: "Ё", Йо: "Ё", йо: "ё",            ЫО: "Ё", Ыо: "Ё", ыо: "ё", ЙУ: "Ю", Йу: "Ю", йу: "ю",            ЫУ: "Ю", Ыу: "Ю", ыу: "ю", Q: "Я", q: "я", ЙА: "Я",            Йа: "Я", йа: "я", ЫА: "Я", Ыа: "Я", ыа: "я", ЦХ: "Ч",            Цх: "Ч", цх: "ч", СХ: "Ш", Сх: "Ш", сх: "ш", ЗХ: "Ж",            Зх: "Ж", зх: "ж", ШХ: "Щ", Шх: "Щ", шх: "щ"        },        ru2en: {            А: "A", а: "a", Б: "B", б: "b", В: "V", в: "v",            Г: "G", г: "g", Д: "D", д: "d", Е: "E", е: "e",            Ё: "Jo", ё: "jo", Ж: "Zh", ж: "zh", З: "Z", з: "z",            И: "I", и: "i", Й: "J", й: "j", К: "K", к: "k", Л: "L",            л: "l", М: "M", м: "m", Н: "N", н: "n", О: "O", о: "o",            П: "P", п: "p", Р: "R", р: "r", С: "S", с: "s", Т: "T",            т: "t", У: "U", у: "u", Ф: "F", ф: "f", Х: "H", х: "h",            Ц: "C", ц: "c", Ч: "Ch", ч: "ch", Ш: "Sh", ш: "sh",            Щ: "Shh", щ: "shh", Ъ: "\"\"", ъ: "\"", Ы: "Y", ы: "y",            Ь: "''", ь: "'", Э: "Je", э: "je", Ю: "Ju", ю: "ju",            Я: "Ja", я: "ja", "№": "#"        }    };    // Public methods    System.prototype.channel = {        subscribe: function(channelName, channelId, params, callback) {            if (privateMethods.subscriptions.indexOf(channelId) > -1) {                $('#channels li button#channel-' + channelId).trigger('click');                return;            }            $.post('/channel/' + channelId + '/params', {                _csrf: privateMethods.options.csrf            }).success(function (data) {                params = $.extend(true, params, data);                if (params.secure) {                    if (privateMethods.options.currentUser.id === '0') {                        if (typeof callback === 'function') callback(true);                        return $.fn.notifier('Гости не могут входить в закрытые комнаты.');                    }                    if (params.password) {                        privateMethods.channel.tmpPassword = params.password;                    } else if (privateMethods.options.currentUser.channelsOwner.indexOf(channelId) < 0) {                        $.fn.ufc().channel.qtips.password(channelName, channelId, params, callback);                        return $(window).qtip('api').show();                    }                }                var subscription = privateMethods.fayeClient.subscribe('/channel/' + channelId, function (msg) {                    if (privateMethods.options.currentUser.id !== '0' && privateMethods.options.currentUser.ignore.indexOf(msg.name) > -1) {                        return;                    }                    if ($('#channel-' + channelId + '-content .scrollableArea').children().size() >= 300) {                        $('#channel-' + channelId + '-content .scrollableArea div:first-child').remove();                    }                    $('#channel-' + channelId + '-content .scrollableArea .notifications').before($.fn.ufc().message.format(msg));                    $('#channel-' + channelId + '-content .scrollableArea').prop({                        scrollTop: $('#channel-' + channelId + '-content .scrollableArea').prop('scrollHeight')                    });                    if (privateMethods.options.currentUser.id === '0') return;                    if (msg.name === privateMethods.options.currentUser.name) return;                    var openedTabId = $('#channels .current button.channel').attr('id');                    if (!openedTabId) return;                    var openedChannelId = openedTabId.substr(8, openedTabId.length);                    var messageTab = $('button#channel-' + channelId);                    if (openedChannelId !== channelId || (privateMethods.options.currentUser.status !== 'O' && !privateMethods.options.currentUser.overrideStatus)) {                        var tabCounter = messageTab.find('span.count');                        var mask = /(?!\()\d+(?=\))/;                        if (tabCounter.length > 0) {                            tabCounter.text(tabCounter.text().replace(mask, parseInt(tabCounter.text().match(mask)) + 1));                        } else {                            messageTab.append('<span class="count">(1)</span>')                        }                        var titleCount = $(document).prop('title').match(mask);                        if (titleCount !== null) {                            $(document).prop('title', $(document).prop('title').replace(mask, (parseInt(titleCount[0]) + 1).toString()));                        } else {                            $(document).prop('title', '(1) ' + $(document).prop('title'));                        }                        if (openedChannelId === channelId) return;                        if (privateMethods.options.currentUser.settings['interface'].flashTabOnMessage || privateMethods.options.currentUser.settings['interface'].flashTabOnMention) {                            messageTab.prev().stop(true, true);                            messageTab.stop(true, true);                            messageTab.next().stop(true, true);                            if (privateMethods.options.currentUser.settings['interface'].flashTabOnMessage) {                                if (msg.to && msg.to.indexOf(privateMethods.options.currentUser.name) >= 0) {                                    $.fn.ufc().tab.flash(channelId, '#344974');                                } else {                                    $.fn.ufc().tab.flash(channelId, '#000000');                                }                            } else if (privateMethods.options.currentUser.settings['interface'].flashTabOnMention && msg.to && msg.to.indexOf(privateMethods.options.currentUser.name) >= 0) {                                $.fn.ufc().tab.flash(channelId, '#344974');                            }                        }                    }                });                subscription.errback(function(err) {                    if (typeof callback === 'function') callback(err);                });                subscription.callback(function () {                    if (params.secure && privateMethods.options.currentUser.channelsOwner.indexOf(channelId) < 0) {                        $(window).qtip('api').hide();                    }                    $.fn.ufc().tab.add(channelName, channelId, params, function () {                        $.blockUI({                            message: 'Загрузка чата "' + channelName + '"',                            css: {                                'border': 'none',                                'background': 'transparent',                                'height': '25px',                                'line-height': '25px',                                'color': '#C4B1C4',                                'font-size': '1.2em'                            },                            overlayCSS: {                                opacity: 0.4,                                backgroundColor: '#4A324A'                            }                        });                        var asyncChaos = false;                        var userList;                        if (params.description !== '') privateMethods.channel.notify(channelId, { name: '$' }, params.description);                        $.post('/channel/' + channelId + '/messages', { _csrf: privateMethods.options.csrf }).success(function (data) {                            if (data.length > 0 && data !== 'OK') {                                var html = '';                                data.reverse().forEach(function (message) {                                    if (privateMethods.options.currentUser.id !== '0' && privateMethods.options.currentUser.ignore.indexOf(message.name) > -1) {                                        return;                                    }                                    html += $.fn.ufc().message.format(message);                                });                                $('#channel-' + channelId + '-content .scrollableArea .notifications').before(html).attr({                                    scrollTop: $('#channel-' + channelId + '-content .scrollableArea').attr("scrollHeight")                                });                            }                            userList = privateMethods.fayeClient.subscribe('/channel/' + channelId + '/users', function (update) {                                if (!asyncChaos) return;                                switch (update.action) {                                    case 'con':                                        update.users.forEach(function (user) {                                            $.fn.ufc().user.connect(channelId, user);                                        });                                        break;                                    case 'dis':                                        update.users.forEach(function (user) {                                            $.fn.ufc().user.disconnect(channelId, user);                                        });                                        break;                                    case 'update':                                        if (update.user.gender) $.fn.ufc().user.updateGender(channelId, update.user);                                        if (update.user.status) $.fn.ufc().user.updateStatus(channelId, update.user);                                    }                            });                            userList.callback(function () {                                $.fn.ufc().sidebar.init('#channel-' + channelId + '-content', params);                                $.post('/channel/' + channelId + '/users', {                                    _csrf: privateMethods.options.csrf                                }).success(function (data) {                                    if (data.length > 0 && data !== 'OK') {                                        $('#channel-' + channelId + '-content .sidebar header span').html(data.length);                                        for (var i = 0, list = ''; i < data.length; i++) {                                            list += $.fn.ufc().user.format(data[i]);                                        }                                        $('#channel-' + channelId + '-content .sidebar ul').append(list);                                        $.fn.ufc().user.highlightMe();                                    }                                    asyncChaos = true;                                }).error(function () {                                    $.fn.notifier('Невозможно получить список пользователей.');                                }).complete(function () {                                    if (params['private']) {                                        var privateSub = privateMethods.fayeClient.subscribe('/channel/' + channelId + '/private', function (update) {                                            if (update.name === privateMethods.options.currentUser.name) return;                                            var tabId = $('#channels .current button.channel').attr('id');                                            var activeChannelId = tabId.substr(8, tabId.length);                                            if (channelId !== activeChannelId) return;                                            $.fn.ufc().channel.type.update(update.name, channelId);                                        });                                        privateSub.callback(function () {                                            $.unblockUI();                                            $.fn.ufc().tab.height(channelId);                                            privateMethods.subscriptions.push(channelId);                                            privateMethods.options.updateSubscriptions(privateMethods.subscriptions);                                            if (typeof callback === 'function') callback();                                        });                                    } else {                                        $.unblockUI();                                        $.fn.ufc().tab.height(channelId);                                        privateMethods.subscriptions.push(channelId);                                        privateMethods.options.updateSubscriptions(privateMethods.subscriptions);                                        if (typeof callback === 'function') callback();                                    }                                });                            });                        }).error(function () {                            $.fn.notifier('Невозможно получить историю сообщений.');                        });                    });                });            }).error(function () {                $.fn.notifier('Невозможно получить параметры комнаты');            });        },        notify: function(channelId, user, msg) {            if (privateMethods.options.currentUser.id !== '0' && !privateMethods.options.currentUser.settings['interface'].chatNotifications) return;            if (privateMethods.options.currentUser.id !== '0' && (user.name === privateMethods.options.currentUser.name || privateMethods.options.currentUser.ignore.indexOf(user.name) > -1)) return;            if ($('#channel-' + channelId + '-content .scrollableArea').children().size() >= 300) {                $('#channel-' + channelId + '-content .scrollableArea div:first-child').remove();            }            $('#channel-' + channelId + '-content .scrollableArea .notifications').before(mote.compile($('#mu-ui-message-format').html())({                getTime: mote.compile($('#mu-ui-message-format-time').html())({                    time: privateMethods.time.format(new Date())                }),                getName: mote.compile($('#mu-ui-message-format-name').html())({                    name: '$',                    isMe: false                }),                getData: msg            }));            $('#channel-' + channelId + '-content .scrollableArea').prop({                scrollTop: $('#channel-' + channelId + '-content .scrollableArea').prop('scrollHeight')            });        }    };    System.prototype.uLogin = {        init: function(uLogin) {            try {                uLogin.init('display=window&fields=first_name,last_name,sex,email&callback=uLoginAction&redirect_uri=http%3A%2F%2F' + window.location.host + '/ulogin');                if (privateMethods.auth.uLoginTimeoutCheck !== null) {                    clearTimeout(privateMethods.auth.uLoginTimeoutCheck);                }                window.uLoginAction = function(token) {                    $.post('/oauth', {                        _csrf: privateMethods.options.csrf,                        token: token,                        channels: privateMethods.subscriptions                    }).success(function(data) {                        if (data.error) return $.fn.notifier(data.error);                        privateMethods.auth.successLogin(data);                    }).error(function() {                        $.fn.notifier('Ошибка отправки данных.');                    });                };                return true;            } catch (e) {                privateMethods.uLogin.disable();                return false;            }        },        disable: function() {            if (privateMethods.auth.uLoginTimeoutCheck !== null) {                clearTimeout(privateMethods.auth.uLoginTimeoutCheck);            }            $('button#uLogin').hide();            $('span.oauth').hide();            $('div#login').css('margin-right', '15px');        }    };    System.prototype.actions = {        'private': {            popup: false,            queue: [],            overlay: {                message: 'Пожалуйста подождите...',                css: {                    'border': 'none',                    'background': 'transparent',                    'height': '25px',                    'line-height': '25px',                    'color': '#fff',                    'font-size': '1.2em'                },                overlayCSS: {                    opacity: 0.6,                    backgroundColor: '#333366'                }            },            request: function(toUser, status) {                $('.qtip').qtip('api').hide();                if (status === 'F') {                    return $.fn.notifier('Пользователь "' + toUser + '" сейчас отключен');                }                if (privateMethods.options.currentUser.ignore.indexOf(toUser) > -1) return;                $.post('/user/private', {                    _csrf: privateMethods.options.csrf,                    toUser: toUser,                    action: 'request'                }).success(function(data) {                    if (data.error) return $.fn.notifier(data.error);                    if (data.id && data.name) {                        privateMethods.channel.subscribe(data.name, data.id, { 'private': true, url: data.url }, null);                    } else {                        $.fn.notifier('Запрос на приват отправлен, если пользователь согласится откроется новый приватный чат');                    }                }).error(function() {                    $.fn.notifier('Ошибка при отправке запроса');                });            },            yes: function(toUser) {                $('div.qtip').block(privateMethods.actions['private'].overlay);                $.post('/user/private', {                    _csrf: privateMethods.options.csrf,                    toUser: toUser,                    action: 'yes'                }).success(function(data) {                    if (data.error) return $.fn.notifier(data.error);                    privateMethods.channel.subscribe(data.name, data.id, { 'private': true, url: data.url }, null);                }).error(function() {                    $.fn.notifier('Ошибка при передачи данных');                }).complete(function() {                    $('div.qtip').unblock();                    $(window).qtip('api').hide();                    privateMethods.actions.popup = false;                    privateMethods.actions['private'].queue.shift();                    if (privateMethods.actions['private'].queue.length > 0) {                        $.fn.ufc().channel.qtips['private'](privateMethods.actions['private'].queue[0]);                        privateMethods.actions.popup = true;                        $(window).qtip('api').show();                    }                });            },            no: function(toUser) {                $('div.qtip').block(privateMethods.actions['private'].overlay);                $.post('/user/private', {                    _csrf: privateMethods.options.csrf,                    toUser: toUser,                    action: 'no'                }).success(function(data) {                    if (data.error) return $.fn.notifier(data.error);                }).error(function() {                    $.fn.notifier('Ошибка при передачи данных');                }).complete(function() {                    $('div.qtip').unblock();                    $(window).qtip('api').hide();                    privateMethods.actions.popup = false;                    privateMethods.actions['private'].queue.shift();                    if (privateMethods.actions['private'].queue.length > 0) {                        $.fn.ufc().channel.qtips['private'](privateMethods.actions['private'].queue[0]);                        privateMethods.actions.popup = true;                        $(window).qtip('api').show();                    }                });            }        },        ignore: function(toUser, action) {            $('.qtip').qtip('api').hide();            $.post('/user/ignore', {                _csrf: privateMethods.options.csrf,                toUser: toUser,                action: action            }).success(function(data) {                if (data.constructor !== Array) return $.fn.notifier('Ошибка получения списка игнорируемых пользователей');                privateMethods.options.updateUser($.extend({}, privateMethods.options.currentUser, { ignore: data }));                if (action === 'add') {                    $.fn.notifier('Пользователь добавлен в список игнорируемых');                } else if (action === 'remove') {                    $.fn.notifier('Пользователь удален из списка игнорируемых');                }                $.fn.ufc().user.filterIgnore();            }).error(function() {                $.fn.notifier('Ошибка при передачи данных');            });        }    };    System.prototype.status = {        change: function(status) {            $.post('/user/status', {                _csrf: privateMethods.options.csrf,                status: privateMethods.status.toLiteral(status)            }).success(function(data) {                if (data.error) return $.fn.notifier(data.error);                if (status === 'online') {                    $.fn.ufc().tab.unreadCounter($('#channels .current button.channel'));                }            }).error(function() {                $.fn.notifier('Ошибка при передачи данных');            });        },        toString: function(literal) {            switch (literal) {                case 'O':                    return 'online';                case 'F':                    return 'offline';                case 'A':                    return 'away';                case 'U':                    return 'unavailable';            }            return false;        },        toStringDisplay: function(literal) {            switch (literal) {                case 'O':                    return 'В сети';                case 'F':                    return 'Отключен';                case 'A':                    return 'Отошел';                case 'U':                    return 'Недоступен';            }            return false;        },        toLiteral: function(status) {            switch (status) {                case 'online':                    return 'O';                case 'offline':                    return 'F';                case 'away':                    return 'A';                case 'unavailable':                    return 'U';            }            return false;        }    };    System.prototype.gender = {        toStringDisplay: function(gender) {            return gender !== 'N' ? gender === 'M' ? 'Мужской' : 'Женский' : 'Не задан';        }    };    System.prototype.time = {        zero: function(num) {            return ['00', '0', ''][num.toString().length] + num.toString();        },        format: function(date) {            return privateMethods.time.zero(date.getHours()) + ':' + privateMethods.time.zero(date.getMinutes()) + ':' + privateMethods.time.zero(date.getSeconds());        },        date: function(date) {            return privateMethods.time.zero(date.getDate()) + '.' + privateMethods.time.zero(date.getMonth() + 1) + '.' + date.getFullYear();        },        parse: function(iso8601) {            var utc = new Date(iso8601.replace(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/, '$1/$2/$3 $4:$5:$6').split('.')[0]);            return new Date(utc.setHours(utc.getHours() + ((new Date().getTimezoneOffset() / 60) * -1)));        }    };    System.prototype.translit = {        goEn2Ru: function (str) {            for (var a in privateMethods.translit.en2ru) {                str = str.split(a).join(privateMethods.translit.en2ru[a]);            }            return str;        },        goRu2En: function (str) {            for (var a in privateMethods.translit.ru2en) {                str = str.split(a).join(privateMethods.translit.ru2en[a]);            }            return str;        }    };    privateMethods.init = function(system) {        $.extend(true, privateMethods, system);        if (!privateMethods.helpers.browserCheck()) {            return alert('Внимание: ваш браузер устарел, для работы чата обновите его.');        }        privateMethods.auth.initLogin();        privateMethods.auth.initLogout();        privateMethods.audio.init();        privateMethods.activity.init();        privateMethods.channel.init();        privateMethods.channel.subscribe(privateMethods.options.channels.main.name, privateMethods.options.channels.main.id, { 'private': false, url: privateMethods.options.channels.main.url }, function () {            if (privateMethods.options.channels.req && privateMethods.options.channels.main.id !== privateMethods.options.channels.req.id) {                privateMethods.channel.subscribe(privateMethods.options.channels.req.name, privateMethods.options.channels.req.id, { 'private': false, url: privateMethods.options.channels.req.url }, function () {                    privateMethods.channel.list.init();                });            } else {                privateMethods.channel.list.init();            }            if (!privateMethods.options.errors) return system;            if (privateMethods.options.errors.oauth) {                $.fn.notifier(privateMethods.options.errors.oauth);            }        });        return system;    };    $.fn.sys = function(user, channels, serverKey, env, csrf, errors) {        return instance ? instance : instance = new System({            currentUser: user,            channels: channels,            serverKey: serverKey,            env: env,            csrf: csrf,            errors: errors || null        });    };})(jQuery, window, document, GibberishAES);