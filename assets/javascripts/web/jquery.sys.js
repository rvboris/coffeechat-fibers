(function($, window, document, aes, ulogin) {    'use strict';    var privateMethods = {};    var instance;    function System(options) {        this.options = options;        $.extend(true, this.options, {            updateUser          : function (user) {                privateMethods.options.currentUser = user;                if (instance) instance.options.currentUser = user;            },            updateSubscriptions : function (subscriptions) {                privateMethods.subscriptions = subscriptions;                if (instance) instance.subscriptions = subscriptions;            }        });        this.subscriptions = [];        this.fayeClient = new Faye.Client(window.location.protocol + '//' + window.location.host + '/faye', { timeout : 10 });        this.fayeClient.bind('transport:down', privateMethods.transportDown);        this.fayeClient.bind('transport:up', privateMethods.transportUp);        this.fayeClient.disable('autodisconnect');        this.critError = false;        this.lastMessages = [];        return privateMethods.init(this);    }    // Private methods    privateMethods.auth = {        initLogin: function() {            function successLogin(data) {                privateMethods.options.updateUser($.extend(true, {}, privateMethods.options.currentUser, data));                privateMethods.channel.userChannel();                $.fn.ufc().login.hide();                $.fn.ufc().user.highlightMe();                $.fn.ufc().user.filterIgnore();                $.fn.ufc().layers.hide();                $('#container').fadeTo('fast', 1);                $('#top #user #channel-list .count').text($('#channel-list header .count').text());            }            $('#login').submit(function () {                if ($(this).find('input').hasClass('ui-state-error')) {                    $.fn.notifier('Ошибка отправки, сообщение пустое.');                    return false;                }                $.blockUI({                    message: 'Авторизация...',                    css: {                        'border': 'none',                        'background': 'transparent',                        'height': '25px',                        'line-height': '25px',                        'color': '#C4B1C4',                        'font-size': '1.2em'                    },                    overlayCSS: {                        opacity: 0.4,                        backgroundColor: '#4A324A'                    }                });                $.post('/user/login', {                    user: $('#login input').serializeObject(),                    channels: privateMethods.subscriptions                }).success(function (data) {                    if (data.error) return $.fn.notifier(data.error);                    successLogin(data);                    try {                        Metrika.hit('/user/login');                    } catch (e) {}                }).error(function () {                    $.fn.notifier('Ошибка отправки данных.');                }).complete(function () {                    $.unblockUI();                });                return false;            });            ulogin.init('display=window&fields=first_name,last_name,sex,email&callback=uLoginAction&redirect_uri=http%3A%2F%2F' + window.location.host + '/ulogin');            window.uLoginAction = function(token) {                $.post('/oauth', { token: token, channels: privateMethods.subscriptions }).success(function(data) {                    if (data.error) return $.fn.notifier(data.error);                    successLogin(data);                    try {                        Metrika.hit('/user/login/oauth');                    } catch (e) { }                }).error(function() {                    $.fn.notifier('Ошибка отправки данных.');                });            }        },        initLogout: function() {            $('body').on('click', '#logout', function () {                $.post('/user/logout').success(function () {                    for (var i = 0; i < privateMethods.subscriptions.length; i++) {                        privateMethods.fayeClient.unsubscribe('/channel/' + privateMethods.subscriptions[i]);                        privateMethods.fayeClient.unsubscribe('/channel/' + privateMethods.subscriptions[i] + '/users');                    }                    privateMethods.fayeClient.unsubscribe('/user/' + privateMethods.options.currentUser.id);                    privateMethods.fayeClient.unsubscribe('/channel-list');                    try {                        Metrika.hit('/user/logout', null, null, { user: privateMethods.options.currentUser.name });                    } catch (e) {}                    window.location.reload();                }).error(function () {                    $.fn.notifier('Ошибка отправки данных.');                });                return false;            });        }    };    privateMethods.audio = {        sounds: {},        init: function () {            privateMethods.audio.sounds.incomingMessage = AudioFX('/sounds/incoming_message', { formats: ['ogg', 'mp3'], volume: 1 });            privateMethods.audio.sounds.outgoingMessage = AudioFX('/sounds/outgoing_message', { formats: ['ogg', 'mp3'], volume: 1 });            privateMethods.audio.sounds.mentionMessage = AudioFX('/sounds/mention_message', { formats: ['ogg', 'mp3'], volume: 1 });            privateMethods.audio.sounds.popup = AudioFX('/sounds/popup', { formats: ['ogg', 'mp3'] });        },        message: function (direction, callback) {            if (privateMethods.options.currentUser.id != '0') {                if (privateMethods.options.currentUser.settings.audio.onMessage) {                    if (privateMethods.options.currentUser.settings.audio.whenAway || privateMethods.options.currentUser.settings.audio.whenUnavailable) {                        if (privateMethods.options.currentUser.settings.audio.whenAway && (privateMethods.options.currentUser.status == 'A' || privateMethods.options.currentUser.status == 'U')) {                            if (direction == 'in') {                                privateMethods.audio.sounds.incomingMessage.play();                            } else {                                privateMethods.audio.sounds.outgoingMessage.play();                            }                        } else if (privateMethods.options.currentUser.settings.audio.whenUnavailable && privateMethods.options.currentUser.status == 'U') {                            if (direction == 'in') {                                privateMethods.audio.sounds.incomingMessage.play();                            } else {                                privateMethods.audio.sounds.outgoingMessage.play();                            }                        }                    } else {                        if (direction == 'in') {                            privateMethods.audio.sounds.incomingMessage.play();                        } else {                            privateMethods.audio.sounds.outgoingMessage.play();                        }                    }                }            } else {                if (direction == 'in') {                    privateMethods.audio.sounds.incomingMessage.play();                } else {                    privateMethods.audio.sounds.outgoingMessage.play();                }            }            if (typeof callback == 'function') callback();        },        mention: function (callback) {            if (privateMethods.options.currentUser.id != '0') {                if (privateMethods.options.currentUser.settings.audio.onMention || privateMethods.options.currentUser.settings.audio.onMessage) {                    if (privateMethods.options.currentUser.settings.audio.whenAway || privateMethods.options.currentUser.settings.audio.whenUnavailable) {                        if (privateMethods.options.currentUser.settings.audio.whenAway && (privateMethods.options.currentUser.status == 'A' || privateMethods.options.currentUser.status == 'U')) {                            privateMethods.audio.sounds.mentionMessage.play();                        } else if (privateMethods.options.currentUser.settings.audio.whenUnavailable && privateMethods.options.currentUser.status == 'U') {                            privateMethods.audio.sounds.mentionMessage.play();                        }                    } else {                        privateMethods.audio.sounds.mentionMessage.play();                    }                }            }            if (typeof callback == 'function') callback();        },        popup: function (callback) {            if (privateMethods.options.currentUser.id != '0') {                privateMethods.audio.sounds.popup.play();            }            if (typeof callback == 'function') callback();        }    };    privateMethods.activity = {        init: function () {            $.activity.init({                interval: 500,                inactive: 1800000,                intervalFn: privateMethods.interval,                inactiveFn: privateMethods.inactive            });            $('body').on('mousemove', function () {                $.activity.isActive() ? $.activity.update() : $.activity.reActivate();            });        },        interval: function (args) {            if (privateMethods.options.currentUser.id == '0') return;            if (args.diff >= 6000000) {                if (!privateMethods.options.currentUser.overrideStatus && privateMethods.options.currentUser.status != 'A') {                    privateMethods.status.change('away');                }            } else if (privateMethods.options.currentUser.status != 'O' && !privateMethods.options.currentUser.overrideStatus) {                privateMethods.status.change('online');            }        },        inactive: function () {            if (privateMethods.options.currentUser.id == '0') return;            if (privateMethods.options.currentUser.status != 'U') privateMethods.status.change('unavailable');        }    };    privateMethods.channel = {        init: function() {            privateMethods.channel.addExtensions();            $('#bottom form').submit(function (e) {                e.preventDefault();                if (privateMethods.options.currentUser.id == '0') {                    $.fn.notifier('Гости не могут отправлять сообщения, пожалуйста зарегистрируйтесь.');                    return false;                }                if ($('#container').css('opacity') == '0') return false;                $('#bottom').block({                    message: 'Отправка...',                    css: {                        'border': 'none',                        'background': 'transparent',                        'height': '25px',                        'line-height': '25px',                        'color': '#FFF',                        'font-size': '1.2em'                    }                });                try {                    var tabId = $('#channels .current button.channel').attr('id');                    var channelId = tabId.substr(8, tabId.length);                    var to = [];                    if ($('#' + tabId + '-content .sendto li').length > 0) {                        $('#' + tabId + '-content .sendto li button.name').each(function (index, value) {                            to[index] = value.innerHTML;                        });                    }                    if ($.inArray($('#message').val(), privateMethods.lastMessages) < 0) {                        if (privateMethods.lastMessages.length >= 10) privateMethods.lastMessages.shift();                        privateMethods.lastMessages.push(privateMethods.parsers.links($('#message').val()));                    }                    privateMethods.fayeClient.publish('/channel/' + channelId, { text : $('#message').val(), to : to }).callback(function () {                        privateMethods.audio.message('out', function () {                            $('#message').val('').focus();                            $('#bottom').unblock();                        });                    });                    Metrika.hit('/message/send', null, null, { user: privateMethods.options.currentUser.name });                } catch (e) {                    if (privateMethods.options.env == 'development') {                        console.log(e.stack);                    }                }                return false;            });            var lastTypeCheck = 0;            var messageHistoryIndex = 0;            var messageTmp = '';            $('#bottom #message').keyup(function(e) {                if (((e.keyCode >= 48 && e.keyCode <= 90) || (e.keyCode >= 96 && e.keyCode <= 111) || (e.keyCode >= 186 && e.keyCode <= 222))) {                    if (new Date().getTime() - lastTypeCheck > 1000) {                        lastTypeCheck = new Date().getTime();                        var tabId = $('#channels .current button.channel').attr('id');                        var channelId = tabId.substr(8, tabId.length);                        if ($('#channels li button#channel-' + channelId).data('private')) {                            privateMethods.fayeClient.publish('/channel/' + channelId + '/private', { action: 'type' });                        }                    }                    messageTmp = $('#bottom #message').val();                } else if (e.keyCode == 38 || e.keyCode == 40) {                    if (e.keyCode == 38) {                        messageHistoryIndex++;                        if (messageHistoryIndex > privateMethods.lastMessages.length) messageHistoryIndex = 0;                    } else if (e.keyCode == 40) {                        messageHistoryIndex--;                        if (messageHistoryIndex < 0) messageHistoryIndex = privateMethods.lastMessages.length;                    }                    if (messageHistoryIndex == 0) {                        $('#bottom #message').val(messageTmp);                    } else if (privateMethods.lastMessages[messageHistoryIndex - 1]) {                        $('#bottom #message').val(privateMethods.lastMessages[messageHistoryIndex - 1])                    }                }            });            if (privateMethods.options.currentUser.id != '0') privateMethods.channel.userChannel();        },        subscribe: function(channelName, channelId, params, callback) {            if (privateMethods.subscriptions.indexOf(channelId) > -1) {                $('#channels li button#channel-' + channelId).trigger('click');                return;            }            $.fn.ufc().tab.add(channelName, channelId, params, function () {                $.blockUI({                    message: 'Загрузка чата "' + channelName + '"',                    css: {                        'border': 'none',                        'background': 'transparent',                        'height': '25px',                        'line-height': '25px',                        'color': '#C4B1C4',                        'font-size': '1.2em'                    },                    overlayCSS: {                        opacity: 0.4,                        backgroundColor: '#4A324A'                    }                });                var asyncChaos = false;                var userList;                var subscription = privateMethods.fayeClient.subscribe('/channel/' + channelId, function (msg) {                    if (privateMethods.options.currentUser.id != '0' && privateMethods.options.currentUser.ignore.indexOf(msg.name) > -1) return;                    if ($('#channel-' + channelId + '-content .scrollableArea').children().size() >= 300) {                        $('#channel-' + channelId + '-content .scrollableArea div:first-child').remove();                    }                    $('#channel-' + channelId + '-content .scrollableArea .notifications').before($.fn.ufc().message.format(msg));                    $('#channel-' + channelId + '-content .scrollableArea').prop({                        scrollTop: $('#channel-' + channelId + '-content .scrollableArea').prop('scrollHeight')                    });                    if (privateMethods.options.currentUser.id == '0') return;                    if (msg.name === privateMethods.options.currentUser.name) return;                    var openedTabId = $('#channels .current button.channel').attr('id');                    if (!openedTabId) return;                    var openedChannelId = openedTabId.substr(8, openedTabId.length);                    var messageTab = $('button#channel-' + channelId);                    if (openedChannelId !== channelId || (privateMethods.options.currentUser.status != 'O' && !privateMethods.options.currentUser.overrideStatus)) {                        var tabCounter = messageTab.find('span.count');                        var mask = /(?!\()\d+(?=\))/;                        if (tabCounter.length > 0) {                            tabCounter.text(tabCounter.text().replace(mask, parseInt(tabCounter.text().match(mask)) + 1));                        } else {                            messageTab.append('<span class="count">(1)</span>')                        }                        var titleCount = $(document).prop('title').match(mask);                        if (titleCount !== null) {                            $(document).prop('title', $(document).prop('title').replace(mask, (parseInt(titleCount[0]) + 1).toString()));                        } else {                            $(document).prop('title', '(1) ' + $(document).prop('title'));                        }                        if (openedChannelId === channelId) return;                        if (privateMethods.options.currentUser.settings['interface'].flashTabOnMessage || privateMethods.options.currentUser.settings['interface'].flashTabOnMention) {                            messageTab.stop(true, true).next().stop(true, true);                            if (privateMethods.options.currentUser.settings['interface'].flashTabOnMessage) {                                if (msg.to && msg.to.indexOf(privateMethods.options.currentUser.name) >= 0) {                                    $.fn.ufc().tab.flash(channelId, '#344974');                                } else {                                    $.fn.ufc().tab.flash(channelId, '#000000');                                }                            } else if (privateMethods.options.currentUser.settings['interface'].flashTabOnMention && msg.to && msg.to.indexOf(privateMethods.options.currentUser.name) >= 0) {                                $.fn.ufc().tab.flash(channelId, '#344974');                            }                        }                    }                });                subscription.callback(function () {                    $.post('/channel/' + channelId + '/messages').success(function (data) {                        if (data != 'OK') {                            var html = '';                            data.reverse().forEach(function (message) {                                if (privateMethods.options.currentUser.id != '0' && privateMethods.options.currentUser.ignore.indexOf(message.name) > -1) return;                                html += $.fn.ufc().message.format(message);                            });                            $('#channel-' + channelId + '-content .scrollableArea .notifications').before(html).attr({                                scrollTop: $('#channel-' + channelId + '-content .scrollableArea').attr("scrollHeight")                            });                        }                        userList = privateMethods.fayeClient.subscribe('/channel/' + channelId + '/users', function (update) {                            if (!asyncChaos) return;                            switch (update.action) {                                case 'con':                                    update.users.forEach(function(user) {                                        $.fn.ufc().user.connect(channelId, user);                                    });                                    break;                                case 'dis':                                    update.users.forEach(function(user) {                                        $.fn.ufc().user.disconnect(channelId, user);                                    });                                    break;                                case 'update':                                    if (update.user.gender) $.fn.ufc().user.updateGender(channelId, update.user);                                    if (update.user.status) $.fn.ufc().user.updateStatus(channelId, update.user);                            }                        });                        userList.callback(function () {                            $.fn.ufc().sidebar.init('#channel-' + channelId + '-content', params);                            $.post('/channel/' + channelId + '/users').success(function (data) {                                if (data.length > 0 && data != 'OK') {                                    $('#channel-' + channelId + '-content .sidebar header span').html(data.length);                                    for (var i = 0, list = ''; i < data.length; i++) list += $.fn.ufc().user.format(data[i]);                                    $('#channel-' + channelId + '-content .sidebar ul').append(list);                                    $.fn.ufc().user.highlightMe();                                }                                asyncChaos = true;                            }).error(function () {                                $.fn.notifier('Невозможно получить список пользователей.');                            }).complete(function () {                                if (params['private']) {                                    var privateSub = privateMethods.fayeClient.subscribe('/channel/' + channelId + '/private', function (update) {                                        if (update.name === privateMethods.options.currentUser.name) return;                                        var tabId = $('#channels .current button.channel').attr('id');                                        var activeChannelId = tabId.substr(8, tabId.length);                                        if (channelId !== activeChannelId) return;                                        $.fn.ufc().channel.type.update(update.name, channelId);                                    });                                    privateSub.callback(function () {                                        $.unblockUI();                                        $.fn.ufc().tab.height(channelId);                                        privateMethods.subscriptions.push(channelId);                                        privateMethods.options.updateSubscriptions(privateMethods.subscriptions);                                        if (typeof callback == 'function') callback();                                    });                                } else {                                    $.unblockUI();                                    $.fn.ufc().tab.height(channelId);                                    privateMethods.subscriptions.push(channelId);                                    privateMethods.options.updateSubscriptions(privateMethods.subscriptions);                                    if (typeof callback == 'function') callback();                                }                            });                        });                    }).error(function () {                        $.fn.notifier('Невозможно получить историю сообщений.');                    });                });            });        },        addExtensions: function() {            privateMethods.fayeClient.addExtension({                outgoing: function (message, callback) {                    if (privateMethods.critError) return;                    message.token = privateMethods.options.currentUser.id;                    if (message.data && message.data.text) {                        message.data.text = aes.enc(message.data.text, privateMethods.options.serverKey + privateMethods.options.currentUser.id);                    }                    if (message.channel == '/meta/connect') {                        message.activeChannels = privateMethods.subscriptions;                    }                    callback(message);                },                incoming: function (message, callback) {                    if (privateMethods.critError) return;                    if (message.error) {                        if (privateMethods.options.env == 'production') {                            if (message.error.match(/^[\d]{3}:/) == null) {                                switch (message.error) {                                    case 'Ключ не верный':                                        privateMethods.critError = true;                                        $.fn.notifier('Ошибка соединения, через 5 секунд страница будет обновлена.');                                        setTimeout(function() {                                            window.location.reload();                                        }, 5000);                                        return;                                    default:                                        $.fn.notifier(message.error);                                }                            }                        } else {                            switch (message.error) {                                case 'Ключ не верный':                                    privateMethods.critError = true;                                    $.fn.notifier('Ошибка соединения');                                    setTimeout(function() {                                        window.location.reload();                                    }, 5000);                                    return;                                default:                                    $.fn.notifier(message.error);                            }                        }                        $('#bottom').unblock();                    }                    if (message.data && message.data.text) {                        try {                            message.data.text = aes.dec(message.data.text, privateMethods.options.serverKey);                        } catch (e) {                            return $.fn.notifier('Ошибка декодирования сообщения.');                        }                    }                    callback(message);                    if (message.data && message.data.text && message.channel.match(/(?:^\/channel\/)([0-9a-z]+)$/) != null) {                        if (privateMethods.options.currentUser.id != '0') {                            if (privateMethods.options.currentUser.ignore.indexOf(message.data.name) > -1) return;                            if (message.data.to && message.data.to.length > 0 && message.data.to.indexOf(privateMethods.options.currentUser.name) > -1) {                                privateMethods.audio.mention(null);                            } else {                                privateMethods.audio.message('in', null);                            }                        } else {                            privateMethods.audio.message('in', null);                        }                    }                }            });        },        userChannel: function() {            privateMethods.fayeClient.subscribe('/user/' + privateMethods.options.currentUser.id, function (update) {                if (privateMethods.options.currentUser.ignore.indexOf(update.fromUser.name) > -1) return;                switch (update.action) {                    case 'private.request':                        if (privateMethods.actions['private'].queue.indexOf(update.fromUser.name) > -1) return;                        if (privateMethods.actions['private'].queue.length == 0) {                            $.fn.ufc().channel.qtips['private'](update.fromUser.name);                            if (privateMethods.options.currentUser.settings.audio.onPrivate) {                                privateMethods.audio.popup(function () {                                    privateMethods.actions.popup = true;                                    privateMethods.actions['private'].queue.push(update.fromUser.name);                                    $(window).qtip('api').show();                                });                            } else {                                privateMethods.actions.popup = true;                                privateMethods.actions['private'].queue.push(update.fromUser.name);                                $(window).qtip('api').show();                            }                        } else {                            privateMethods.actions['private'].queue.push(update.fromUser.name);                        }                        break;                    case 'private.no':                        $.fn.notifier('Пользователь "' + update.fromUser.name + '" отказался от приглашения в приват');                        break;                    case 'private.yes':                        privateMethods.channel.subscribe(update.privateChannel.name, update.privateChannel.id, { 'private': true, url: update.privateChannel.url }, function() {                            $.fn.notifier('Пользователь "' + update.fromUser.name + '" принял ваше приглашение в приват');                        });                        break;                    case 'private.reopen':                        privateMethods.channel.subscribe(update.privateChannel.name, update.privateChannel.id, { 'private': true, url: update.privateChannel.url }, function() {                            $.fn.notifier('Пользователь "' + update.fromUser.name + '" вернулся в приват');                        });                        break;                    case 're-entry':                        $.fn.notifier('Попытка повторного входа');                }            });        },        list: function() {            privateMethods.fayeClient.subscribe('/channel-list', function (update) {                switch (update.action) {                    case 'rem':                        break;                    case 'add':                        break;                    case 'upd':                        update.channels.forEach(function(channel) {                            var counter = $('#channel-list menu button').filter(function () {                                return $(this).data('id') == channel.id;                            }).find('.count');                            counter.html(channel.count.toString());                        });                }            }).callback(function () {                if ($.jStorage.get('channel-list') || $.jStorage.get('channel-list') == null) {                    $.fn.ufc().channels.showChannelList(false);                }                $('#channel-list').block({                    message: 'Загрузка...',                    css: {                        'border': 'none',                        'background': 'transparent',                        'height': '25px',                        'line-height': '25px',                        'color': '#C4B1C4',                        'font-size': '1.2em'                    },                    overlayCSS: {                        opacity: 0.2,                        backgroundColor: '#000'                    }                });                $.post('/channel/list').success(function (data) {                    if (data.length > 0 && data != 'OK') {                        $('#top #user #channel-list .count').html(data.length);                        $('#channel-list header .count').html(data.length);                        for (var i = 0, list = ''; i < data.length; i++) list += $.fn.ufc().channel.format(data[i]);                        $('#channel-list menu').append(list);                    }                }).error(function () {                    $.fn.notifier('Невозможно получить список комнат');                }).complete(function () {                    $('#channel-list').unblock();                });            });            $.fn.ufc().channels.init();            $('#channel-list').on('click', 'button', function () {                privateMethods.channel.subscribe($(this).find('span.name').text(), $(this).data('id'), { 'private': false, url: $(this).data('url') });            });        }    };    privateMethods.helpers = {        browserCheck: function () {            return ($.browser.name == 'firefox' && $.browser.versionNumber >= 4)   ||                   ($.browser.name == 'msie'    && $.browser.versionNumber >= 9)   ||                   ($.browser.name == 'chrome'  && $.browser.versionNumber >= 10)  ||                   ($.browser.name == 'opera'   && $.browser.versionNumber >= 9.8) ||                   ($.browser.name == 'safari'  && $.browser.versionNumber >= 5);        }    };    privateMethods.parsers = {        links: function (message) {            return message.replace(/((\w+:\/\/)[-a-zA-Z0-9:@;?&=\/%\+\.\*!'\(\),\$_\{\}\^~\[\]`#|]+)/, '<a href="$1" class="userLink" target="_blank">$1</a>');        }    };    privateMethods.transportDown = function () {        $.blockUI({            message : 'Соединение с сервером потеряно, проверьте подключение к интернету',            css : {                'border' : 'none',                'background' : 'transparent',                'height' : '25px',                'line-height' : '25px',                'color' : '#C4B1C4',                'font-size' : '1.2em'            },            overlayCSS : {                opacity : 0.4,                backgroundColor : '#4A324A'            }        });    };    privateMethods.transportUp = function () {        $.unblockUI();    };    // Public methods    System.prototype.channel = {        notify: function(channelId, user, msg) {            if (privateMethods.options.currentUser.id != '0' && !privateMethods.options.currentUser.settings['interface'].chatNotifications) return;            if (privateMethods.options.currentUser.id != '0' && (user.name == privateMethods.options.currentUser.name || privateMethods.options.currentUser.ignore.indexOf(user.name) > -1)) return;            if ($('#channel-' + channelId + '-content .scrollableArea').children().size() >= 300) {                $('#channel-' + channelId + '-content .scrollableArea div:first-child').remove();            }            $('#channel-' + channelId + '-content .scrollableArea .notifications').before(                "<div class='message cleafix'>" +                    "<time>[" + privateMethods.time.format(new Date()) + ']</time>' +                    '<button class="name">$</button>:' +                    '<p>' + msg + '</p>' +                '</div>');            $('#channel-' + channelId + '-content .scrollableArea').prop({                scrollTop: $('#channel-' + channelId + '-content .scrollableArea').prop('scrollHeight')            });        }    };    System.prototype.actions = {        'private' : {            popup   : false,            queue   : [],            overlay : {                message    : 'Пожалуйста подождите...',                css        : {                    'border'      : 'none',                    'background'  : 'transparent',                    'height'      : '25px',                    'line-height' : '25px',                    'color'       : '#fff',                    'font-size'   : '1.2em'                },                overlayCSS : {                    opacity         : 0.6,                    backgroundColor : '#333366'                }            },            request : function (toUser, status) {                $('.qtip').qtip('api').hide();                if (status == 'F') {                    return $.fn.notifier('Пользователь "' + toUser + '" сейчас отключен');                }                $.post('/user/private', { toUser : toUser, action : 'request' }).success(                    function (data) {                        if (data.error) return $.fn.notifier(data.error);                        if (data.id && data.name) {                            privateMethods.channel.subscribe(data.name, data.id, { 'private' : true, url : data.url }, null);                        } else {                            $.fn.notifier('Запрос на приват отправлен, если пользователь согласится откроется новый приватный чат');                        }                    }).error(function () {                        $.fn.notifier('Ошибка при отправке запроса');                    });            },            yes : function (toUser) {                $('div.qtip').block(privateMethods.actions['private'].overlay);                $.post('/user/private', { toUser : toUser, action : 'yes' }).success(                    function (data) {                        if (data.error) return $.fn.notifier(data.error);                        privateMethods.channel.subscribe(data.name, data.id, { 'private' : true, url : data.url }, null);                    }).error(                    function () {                        $.fn.notifier('Ошибка при передачи данных');                    }).complete(function () {                        $('div.qtip').unblock();                        $(window).qtip('api').hide();                        privateMethods.actions.popup = false;                        privateMethods.actions['private'].queue.shift();                        if (privateMethods.actions['private'].queue.length > 0) {                            $.fn.ufc().channel.qtips['private'](privateMethods.actions['private'].queue[0]);                            privateMethods.actions.popup = true;                            $(window).qtip('api').show();                        }                    });            },            no : function (toUser) {                $('div.qtip').block(privateMethods.actions['private'].overlay);                $.post('/user/private', { toUser : toUser, action : 'no' }).success(                    function (data) {                        if (data.error) return $.fn.notifier(data.error);                    }).error(                    function () {                        $.fn.notifier('Ошибка при передачи данных');                    }).complete(function () {                        $('div.qtip').unblock();                        $(window).qtip('api').hide();                        privateMethods.actions.popup = false;                        privateMethods.actions['private'].queue.shift();                        if (privateMethods.actions['private'].queue.length > 0) {                            $.fn.ufc().channel.qtips['private'](privateMethods.actions['private'].queue[0]);                            privateMethods.actions.popup = true;                            $(window).qtip('api').show();                        }                    });            }        },        ignore    : function (toUser, action) {            $('.qtip').qtip('api').hide();            $.post('/user/ignore', { toUser : toUser, action : action }).success(                function (data) {                    if (data.constructor != Array) return $.fn.notifier('Ошибка получения списка игнорируемых пользователей');                    privateMethods.options.updateUser($.extend({}, privateMethods.options.currentUser, { ignore : data }));                    if (action == 'add') {                        $.fn.notifier('Пользователь добавлен в список игнорируемых');                    } else if (action == 'remove') {                        $.fn.notifier('Пользователь удален из списка игнорируемых');                    }                    $.fn.ufc().user.filterIgnore();                }).error(function () {                    $.fn.notifier('Ошибка при передачи данных');                });        }    };    System.prototype.status = {        change          : function (status) {            $.post('/user/status', { status : privateMethods.status.toLiteral(status) }).success(                function (data) {                    if (data.error) return $.fn.notifier(data.error);                    if (status == 'online') {                        $.fn.ufc().tab.unreadCounter($('#channels .current button.channel'));                    }                }).error(function () {                    $.fn.notifier('Ошибка при передачи данных');                });        },        toString        : function (literal) {            switch (literal) {                case 'O':                    return 'online';                case 'F':                    return 'offline';                case 'A':                    return 'away';                case 'U':                    return 'unavailable';            }            return false;        },        toStringDisplay : function (literal) {            switch (literal) {                case 'O':                    return 'В сети';                case 'F':                    return 'Отключен';                case 'A':                    return 'Отошел';                case 'U':                    return 'Недоступен';            }            return false;        },        toLiteral       : function (status) {            switch (status) {                case 'online':                    return 'O';                case 'offline':                    return 'F';                case 'away':                    return 'A';                case 'unavailable':                    return 'U';            }            return false;        }    };    System.prototype.gender = {        toStringDisplay : function (gender) {            return gender != 'N' ? gender == 'M' ? 'Мужской' : 'Женский' : 'Не задан';        }    };    System.prototype.time = {        zero   : function (num) {            return ['00', '0', ''][num.toString().length] + num.toString();        },        format : function (date) {            return privateMethods.time.zero(date.getHours()) + ':' + privateMethods.time.zero(date.getMinutes()) + ':' + privateMethods.time.zero(date.getSeconds());        },        date   : function (date) {            return privateMethods.time.zero(date.getDate()) + '.' + privateMethods.time.zero(date.getMonth() + 1) + '.' + date.getFullYear();        },        parse  : function (iso8601) {            var utc = new Date(iso8601.replace(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})/, '$1/$2/$3 $4:$5:$6').split('.')[0]);            return new Date(utc.setHours(utc.getHours() + ((new Date().getTimezoneOffset() / 60) * -1)));        }    };    privateMethods.init = function (system) {        $.extend(true, privateMethods, system);        if (!privateMethods.helpers.browserCheck()) {            return alert('Внимание: ваш браузер устарел, для работы чата обновите его.');        }        privateMethods.auth.initLogin();        privateMethods.auth.initLogout();        privateMethods.audio.init();        privateMethods.activity.init();        privateMethods.channel.init();        privateMethods.channel.subscribe(privateMethods.options.channels.main.name, privateMethods.options.channels.main.id, { 'private' : false, url : privateMethods.options.channels.main.url }, function () {            if (privateMethods.options.channels.req) {                privateMethods.channel.subscribe(privateMethods.options.channels.req.name, privateMethods.options.channels.req.id, { 'private' : false, url : privateMethods.options.channels.req.url }, function () {                    privateMethods.channel.list();                });            } else {                privateMethods.channel.list();            }            if (!privateMethods.options.errors) return system;            if (privateMethods.options.errors.oauth) {                $.fn.notifier(privateMethods.options.errors.oauth);            }        });        return system;    };    $.fn.sys = function (user, channels, serverKey, env, errors) {        return instance ? instance : instance = new System({            currentUser: user,            channels: channels,            serverKey: serverKey,            env: env,            errors: errors || null        });    };})(jQuery, window, document, GibberishAES, uLogin);